<div id="<%= dom_id link %>" class="w-full sm:w-auto my-5 max-w-md mx-auto">
  <div class="bg-white dark:bg-gray-900 shadow-xl rounded-3xl p-6 space-y-5 border border-gray-300 dark:border-gray-700 transition-shadow duration-300 hover:shadow-blue-400 dark:hover:shadow-blue-900 relative">
    
    <!-- Header -->
    <div>
      <strong class="block text-gray-900 dark:text-gray-100 text-lg font-semibold mb-2">
        ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡ß¨‡ß™‡¶ü‡¶ø ‡¶ú‡ßá‡¶≤‡¶æ:
      </strong>
      <p class="text-blue-700 dark:text-blue-400 break-words text-base underline decoration-dotted decoration-2">
        <% countries = [
                        "‡¶¢‡¶æ‡¶ï‡¶æ", "‡¶ó‡¶æ‡¶ú‡ßÄ‡¶™‡ßÅ‡¶∞", "‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶ó‡¶û‡ßç‡¶ú", "‡¶Æ‡¶æ‡¶®‡¶ø‡¶ï‡¶ó‡¶û‡ßç‡¶ú", "‡¶Æ‡ßÅ‡¶®‡ßç‡¶∏‡ßÄ‡¶ó‡¶û‡ßç‡¶ú", "‡¶®‡¶æ‡¶∞‡¶æ‡¶Ø‡¶º‡¶£‡¶ó‡¶û‡ßç‡¶ú", "‡¶®‡¶∞‡¶∏‡¶ø‡¶Ç‡¶¶‡ßÄ", "‡¶∞‡¶æ‡¶ú‡¶¨‡¶æ‡¶°‡¶º‡ßÄ", "‡¶ü‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶á‡¶≤", "‡¶Æ‡¶æ‡¶¶‡¶æ‡¶∞‡ßÄ‡¶™‡ßÅ‡¶∞", "‡¶ó‡ßã‡¶™‡¶æ‡¶≤‡¶ó‡¶û‡ßç‡¶ú", "‡¶∂‡¶∞‡ßÄ‡¶Ø‡¶º‡¶§‡¶™‡ßÅ‡¶∞",
                        "‡¶ö‡¶ü‡ßç‡¶ü‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ", "‡¶ï‡¶ï‡ßç‡¶∏‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞", "‡¶¨‡¶æ‡¶®‡ßç‡¶¶‡¶∞‡¶¨‡¶æ‡¶®", "‡¶ñ‡¶æ‡¶ó‡¶°‡¶º‡¶æ‡¶õ‡¶°‡¶º‡¶ø", "‡¶∞‡¶æ‡¶ô‡ßç‡¶ó‡¶æ‡¶Æ‡¶æ‡¶ü‡¶ø", "‡¶¨‡ßç‡¶∞‡¶æ‡¶π‡ßç‡¶Æ‡¶£‡¶¨‡¶æ‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡¶æ", "‡¶ï‡ßÅ‡¶Æ‡¶ø‡¶≤‡ßç‡¶≤‡¶æ", "‡¶ö‡¶æ‡¶Å‡¶¶‡¶™‡ßÅ‡¶∞", "‡¶´‡ßá‡¶®‡ßÄ", "‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Æ‡ßÄ‡¶™‡ßÅ‡¶∞", "‡¶®‡ßã‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ",
                        "‡¶∞‡¶æ‡¶ú‡¶∂‡¶æ‡¶π‡ßÄ", "‡¶®‡¶æ‡¶ü‡ßã‡¶∞", "‡¶®‡¶ì‡¶ó‡¶æ‡¶Å", "‡¶ö‡¶æ‡¶Å‡¶™‡¶æ‡¶á‡¶®‡¶¨‡¶æ‡¶¨‡¶ó‡¶û‡ßç‡¶ú", "‡¶™‡¶æ‡¶¨‡¶®‡¶æ", "‡¶¨‡¶ó‡ßÅ‡¶°‡¶º‡¶æ", "‡¶∏‡¶ø‡¶∞‡¶æ‡¶ú‡¶ó‡¶û‡ßç‡¶ú", "‡¶ú‡¶Ø‡¶º‡¶™‡ßÅ‡¶∞‡¶π‡¶æ‡¶ü",
                        "‡¶ñ‡ßÅ‡¶≤‡¶®‡¶æ", "‡¶¨‡¶æ‡¶ó‡ßá‡¶∞‡¶π‡¶æ‡¶ü", "‡¶∏‡¶æ‡¶§‡¶ï‡ßç‡¶∑‡ßÄ‡¶∞‡¶æ", "‡¶Ø‡¶∂‡ßã‡¶∞", "‡¶ù‡¶ø‡¶®‡¶æ‡¶á‡¶¶‡¶π", "‡¶Æ‡¶æ‡¶ó‡ßÅ‡¶∞‡¶æ", "‡¶ï‡ßÅ‡¶∑‡ßç‡¶ü‡¶ø‡¶Ø‡¶º‡¶æ", "‡¶ö‡ßÅ‡¶Ø‡¶º‡¶æ‡¶°‡¶æ‡¶ô‡ßç‡¶ó‡¶æ", "‡¶®‡¶°‡¶º‡¶æ‡¶á‡¶≤", "‡¶Æ‡ßá‡¶π‡ßá‡¶∞‡¶™‡ßÅ‡¶∞",
                        "‡¶¨‡¶∞‡¶ø‡¶∂‡¶æ‡¶≤", "‡¶≠‡ßã‡¶≤‡¶æ", "‡¶™‡¶ü‡ßÅ‡¶Ø‡¶º‡¶æ‡¶ñ‡¶æ‡¶≤‡ßÄ", "‡¶™‡¶ø‡¶∞‡ßã‡¶ú‡¶™‡ßÅ‡¶∞", "‡¶¨‡¶∞‡¶ó‡ßÅ‡¶®‡¶æ", "‡¶ù‡¶æ‡¶≤‡¶ï‡¶æ‡¶†‡¶ø",
                        "‡¶∏‡¶ø‡¶≤‡ßá‡¶ü", "‡¶∏‡ßÅ‡¶®‡¶æ‡¶Æ‡¶ó‡¶û‡ßç‡¶ú", "‡¶Æ‡ßå‡¶≤‡¶≠‡ßÄ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞", "‡¶π‡¶¨‡¶ø‡¶ó‡¶û‡ßç‡¶ú",
                        "‡¶∞‡¶Ç‡¶™‡ßÅ‡¶∞", "‡¶¶‡¶ø‡¶®‡¶æ‡¶ú‡¶™‡ßÅ‡¶∞", "‡¶†‡¶æ‡¶ï‡ßÅ‡¶∞‡¶ó‡¶æ‡¶Å‡¶ì", "‡¶™‡¶û‡ßç‡¶ö‡¶ó‡¶°‡¶º", "‡¶®‡ßÄ‡¶≤‡¶´‡¶æ‡¶Æ‡¶æ‡¶∞‡ßÄ", "‡¶ó‡¶æ‡¶á‡¶¨‡¶æ‡¶®‡ßç‡¶ß‡¶æ", "‡¶ï‡ßÅ‡¶°‡¶º‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ", "‡¶≤‡¶æ‡¶≤‡¶Æ‡¶®‡¶ø‡¶∞‡¶π‡¶æ‡¶ü",
                        "‡¶Æ‡¶Ø‡¶º‡¶Æ‡¶®‡¶∏‡¶ø‡¶Ç‡¶π", "‡¶ú‡¶æ‡¶Æ‡¶æ‡¶≤‡¶™‡ßÅ‡¶∞", "‡¶∂‡ßá‡¶∞‡¶™‡ßÅ‡¶∞", "‡¶®‡ßá‡¶§‡ßç‡¶∞‡¶ï‡ßã‡¶®‡¶æ"
                      ]%>
        <% country_name = countries.sample %>

        <%= link_to country_name, link.url, target: "_blank", rel: "noopener", class: "hover:text-blue-500 transition-colors" %>
      </p>
    </div>

    <!-- Click & Earn Button -->
    <button data-link-id="<%= link.id %>" data-link-url="<%= link.url %>"
      class="start-click w-full sm:w-auto bg-blue-600 hover:bg-blue-700 active:scale-95 transition-transform text-white font-semibold py-3 px-6 rounded-full shadow-lg focus:outline-none focus:ring-4 focus:ring-blue-400 focus:ring-opacity-50">
      Click & Earn
    </button>

    <!-- Countdown -->
    <div id="countdown-<%= link.id %>" class="hidden text-center text-yellow-500 font-bold text-lg mt-5 select-none"></div>

    <!-- Auto Submit Form -->
    <%= form_with url: click_link_path(link), method: :post, local: true, html: { id: "auto-submit-form-#{link.id}", class: "hidden" } do %>
      <%= hidden_field_tag :auto_claim, true %>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
  const channel = new BroadcastChannel("click_earn_channel");

  document.querySelectorAll(".start-click").forEach(button => {
    button.addEventListener("click", () => {
      if (button.clicked) return;
      button.clicked = true;

      const linkId = button.dataset.linkId;
      const linkUrl = button.dataset.linkUrl;
      const countdownEl = document.querySelector(`#countdown-${linkId}`);
      const form = document.querySelector(`#auto-submit-form-${linkId}`);
      const newTab = window.open(`/click_window/${linkId}?url=${encodeURIComponent(linkUrl)}`, "_blank");

      let timeLeft = 30;
      button.disabled = true;
      button.classList.add("opacity-50", "cursor-not-allowed");
      countdownEl.classList.remove("hidden");
      countdownEl.textContent = `‚è≥ Wait ${timeLeft}s to earn reward...`;

      const timer = setInterval(() => {
        timeLeft--;
        countdownEl.textContent = `‚è≥ Wait ${timeLeft}s to earn reward...`;
        channel.postMessage({ type: "update", linkId, timeLeft });

        if (timeLeft <= 0) {
          clearInterval(timer);
          countdownEl.textContent = "üéâ Reward earned!";
          form.submit();
          channel.postMessage({ type: "complete", linkId });
        }
      }, 1000);

      // Detect if the new tab is closed early
      const monitor = setInterval(() => {
        if (newTab.closed && timeLeft > 0) {
          clearInterval(timer);
          clearInterval(monitor);
          countdownEl.textContent = "‚ùå Reward cancelled. Tab closed too early.";
          button.disabled = false;
          button.classList.remove("opacity-50", "cursor-not-allowed");
        }
      }, 1000);
    });
  });

  // Sync countdown across tabs
  channel.onmessage = (event) => {
    const { type, linkId, timeLeft } = event.data;
    const el = document.querySelector(`#countdown-${linkId}`);
    if (!el) return;

    if (type === "update") {
      el.classList.remove("hidden");
      el.textContent = `‚è≥ Wait ${timeLeft}s to earn reward...`;
    }

    if (type === "complete") {
      el.textContent = "üéâ Reward earned!";
    }
  };
});

</script>